/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.palmirauv.fada;

import com.palmirauv.fada.impl.ConjuntoArray;
import com.palmirauv.fada.impl.ConjuntoBinario;
import com.palmirauv.fada.impl.ConjuntoListaE;
import javax.swing.JOptionPane;

/**
 *
 * @author giord
 */
public class VentanaPrincipal extends javax.swing.JFrame {

    //Conjuntos como Arreglos
    ConjuntoArray conjuntoA = new ConjuntoArray();
    ConjuntoArray conjuntoB = new ConjuntoArray();
    ConjuntoArray universal = new ConjuntoArray();

    //Conjuntos como Listas Enlazadas
    ConjuntoListaE conjuntoLA = new ConjuntoListaE();
    ConjuntoListaE conjuntoLB = new ConjuntoListaE();
    ConjuntoListaE universalL = new ConjuntoListaE();

    //Conjuntos como arreglos de bytes
    ConjuntoBinario conjuntoABy = new ConjuntoBinario();
    ConjuntoBinario conjuntoBBy = new ConjuntoBinario();
    ConjuntoBinario universalBy = new ConjuntoBinario();

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titulo = new javax.swing.JLabel();
        operaciones = new javax.swing.JComboBox<>();
        crearConjunto = new javax.swing.JButton();
        agregarElemento = new javax.swing.JButton();
        numeroElementos = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        nombre = new javax.swing.JLabel();
        nombreConjunto = new javax.swing.JComboBox<>();
        tipoConjunto = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        mostrarConjunto = new javax.swing.JTextField();
        elemento = new javax.swing.JTextField();
        jlabel3 = new javax.swing.JLabel();
        conjuntoResultado = new javax.swing.JTextField();
        primerConjunto = new javax.swing.JTextField();
        segundoConjunto = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        conjuntoAcombo = new javax.swing.JComboBox<>();
        conjuntoBcombo = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        botonMostrar = new javax.swing.JButton();
        realizarOperacion = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titulo.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        titulo.setText("Operaciones de conjuntos");

        operaciones.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Unión", "Intersección", "Diferencia", "Complemento" }));
        operaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                operacionesActionPerformed(evt);
            }
        });

        crearConjunto.setText("Crear");
        crearConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearConjuntoActionPerformed(evt);
            }
        });

        agregarElemento.setText("Agregar");
        agregarElemento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarElementoActionPerformed(evt);
            }
        });

        numeroElementos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numeroElementosActionPerformed(evt);
            }
        });
        numeroElementos.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                numeroElementosKeyTyped(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Tamaño");

        nombre.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        nombre.setText("Nombre");

        nombreConjunto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ConjuntoA", "ConjuntoB", "Universal" }));
        nombreConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreConjuntoActionPerformed(evt);
            }
        });

        tipoConjunto.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "Array", "LinkedList", "Bytes" }));
        tipoConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tipoConjuntoActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Tipo Conjunto");

        mostrarConjunto.setEditable(false);
        mostrarConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarConjuntoActionPerformed(evt);
            }
        });

        elemento.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                elementoKeyTyped(evt);
            }
        });

        jlabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jlabel3.setText("elemento");

        conjuntoResultado.setEditable(false);
        conjuntoResultado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conjuntoResultadoActionPerformed(evt);
            }
        });

        primerConjunto.setEditable(false);
        primerConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                primerConjuntoActionPerformed(evt);
            }
        });

        segundoConjunto.setEditable(false);
        segundoConjunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                segundoConjuntoActionPerformed(evt);
            }
        });

        jLabel3.setText("=");

        conjuntoAcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "ConjuntoA", "ConjuntoB" }));
        conjuntoAcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conjuntoAcomboActionPerformed(evt);
            }
        });

        conjuntoBcombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "-", "ConjuntoA", "ConjuntoB" }));
        conjuntoBcombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                conjuntoBcomboActionPerformed(evt);
            }
        });

        jLabel4.setText("Conjunto Resultado");

        botonMostrar.setText("mostrar");
        botonMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonMostrarActionPerformed(evt);
            }
        });

        realizarOperacion.setText("Realizar");
        realizarOperacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realizarOperacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(titulo)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(96, 96, 96)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(nombre, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jlabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(62, 62, 62)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(numeroElementos, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(tipoConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(nombreConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(crearConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(elemento, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(37, 37, 37)
                                                .addComponent(agregarElemento)))
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(realizarOperacion)
                                            .addComponent(botonMostrar)))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(220, 220, 220)
                        .addComponent(mostrarConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 419, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(64, 64, 64)
                        .addComponent(conjuntoAcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(primerConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 103, Short.MAX_VALUE)
                        .addComponent(segundoConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conjuntoResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 273, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(operaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(104, 104, 104)
                        .addComponent(conjuntoBcombo, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel4)
                        .addGap(133, 133, 133))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(titulo)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tipoConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numeroElementos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombre)
                    .addComponent(nombreConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(crearConjunto)
                    .addComponent(botonMostrar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(elemento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(agregarElemento)
                    .addComponent(jlabel3))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(141, 141, 141)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(conjuntoAcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(operaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(conjuntoBcombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(realizarOperacion))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(mostrarConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(93, 93, 93)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(primerConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(conjuntoResultado, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(segundoConjunto, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void crearConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearConjuntoActionPerformed

        //ARRAYS
        try {
            if (tipoConjunto.getSelectedItem().equals("Array") && nombreConjunto.getSelectedItem().equals("ConjuntoA")) {
                this.conjuntoA.setLength(Integer.parseInt(numeroElementos.getText()));
                mostrarConjunto.setText("ConjuntoA: " + conjuntoA.toString());

            }
            if (tipoConjunto.getSelectedItem().equals("Array") && nombreConjunto.getSelectedItem().equals("ConjuntoB")) {
                this.conjuntoB.setLength(Integer.parseInt(numeroElementos.getText()));
                mostrarConjunto.setText("ConjuntoB: " + conjuntoB.toString());

            }
            if (tipoConjunto.getSelectedItem().equals("Array") && nombreConjunto.getSelectedItem().equals("Universal")) {
                this.universal.setLength(Integer.parseInt(numeroElementos.getText()));
                for (int i = 0; i < this.universal.getElementos().length; i++) {
                    this.universal.getElementos()[i] = 1;
                }
                mostrarConjunto.setText("Universal: " + universal.toString());
            }
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(null, "Debes Ingresar el tamaño del Conjunto");
        }

        //BINARIOS
        try {
            if (tipoConjunto.getSelectedItem().equals("Bytes") && nombreConjunto.getSelectedItem().equals("ConjuntoA")) {
                this.conjuntoABy.setLength(Integer.parseInt(numeroElementos.getText()));
                mostrarConjunto.setText("ConjuntoA: " + conjuntoABy.toString());

            }
            if (tipoConjunto.getSelectedItem().equals("Bytes") && nombreConjunto.getSelectedItem().equals("ConjuntoB")) {
                this.conjuntoBBy.setLength(Integer.parseInt(numeroElementos.getText()));
                mostrarConjunto.setText("ConjuntoB: " + conjuntoBBy.toString());

            }
            if (tipoConjunto.getSelectedItem().equals("Bytes") && nombreConjunto.getSelectedItem().equals("Universal")) {
                this.universalBy.setLength(Integer.parseInt(numeroElementos.getText()));
                for (int i = 0; i < this.universalBy.getMaxbit(); i++) {
                    this.universalBy.getElementos()[i] = 1;
                }
                mostrarConjunto.setText("Universal: " + universalBy.toString());
            }
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(null, "Debes Ingresar el tamaño del Conjunto");
        }

        //LINKEDLIST
        try {
            if (tipoConjunto.getSelectedItem().equals("LinkedList") && nombreConjunto.getSelectedItem().equals("ConjuntoA")) {

                mostrarConjunto.setText("ConjuntoA: " + conjuntoLA.toString());

            }
            if (tipoConjunto.getSelectedItem().equals("LinkedList") && nombreConjunto.getSelectedItem().equals("ConjuntoB")) {

                mostrarConjunto.setText("ConjuntoB: " + conjuntoLB.toString());

            }
            if (tipoConjunto.getSelectedItem().equals("LinkedList") && nombreConjunto.getSelectedItem().equals("Universal")) {

                mostrarConjunto.setText("Universal: " + universalL.toString());
            }
        } catch (NumberFormatException exc) {
            JOptionPane.showMessageDialog(null, "Debes Ingresar el tamaño del Conjunto");
        }
    }//GEN-LAST:event_crearConjuntoActionPerformed

    private void agregarElementoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarElementoActionPerformed
        try {
            //Agregar Elemento Array
            if (tipoConjunto.getSelectedItem().equals("Array") && nombreConjunto.getSelectedItem().equals("ConjuntoA")) {
                conjuntoA.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("ConjuntoA: " + conjuntoA.toString());
            }
            if (tipoConjunto.getSelectedItem().equals("Array") && nombreConjunto.getSelectedItem().equals("ConjuntoB")) {
                conjuntoB.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("ConjuntoB: " + conjuntoB.toString());
            }

            //Agregar Elemento Bytes
            if (tipoConjunto.getSelectedItem().equals("Bytes") && nombreConjunto.getSelectedItem().equals("ConjuntoA")) {
                conjuntoABy.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("ConjuntoA: " + conjuntoABy.toString());
            }
            if (tipoConjunto.getSelectedItem().equals("Bytes") && nombreConjunto.getSelectedItem().equals("ConjuntoB")) {
                conjuntoBBy.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("ConjuntoB: " + conjuntoBBy.toString());
            }

            //Agregar Elementos LinkedList
            if (tipoConjunto.getSelectedItem().equals("LinkedList") && nombreConjunto.getSelectedItem().equals("ConjuntoA")) {
                conjuntoLA.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("ConjuntoA: " + conjuntoLA.toString());
            }
            if (tipoConjunto.getSelectedItem().equals("LinkedList") && nombreConjunto.getSelectedItem().equals("ConjuntoB")) {
                conjuntoLB.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("ConjuntoB: " + conjuntoLB.toString());
            }
            if (tipoConjunto.getSelectedItem().equals("LinkedList") && nombreConjunto.getSelectedItem().equals("Universal")) {
                universalL.add(Integer.parseInt(elemento.getText()));
                mostrarConjunto.setText("Universal: " + universalL.toString());
            }

        } catch (Exception exc) {
            JOptionPane.showMessageDialog(null, exc.getMessage());

        }


    }//GEN-LAST:event_agregarElementoActionPerformed

    private void nombreConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreConjuntoActionPerformed
        elemento.setEnabled(true);

        if (nombreConjunto.getSelectedItem().equals("Universal") && !(tipoConjunto.getSelectedItem().equals("LinkedList"))) {
            elemento.setEnabled(false);

        }
//        if(tipoConjunto.getSelectedItem().equals("LinkedList")){
//            elemento.setEnabled(true);
//        }


    }//GEN-LAST:event_nombreConjuntoActionPerformed

    private void mostrarConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarConjuntoActionPerformed


    }//GEN-LAST:event_mostrarConjuntoActionPerformed

    private void numeroElementosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numeroElementosActionPerformed

    }//GEN-LAST:event_numeroElementosActionPerformed

    private void tipoConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tipoConjuntoActionPerformed

        numeroElementos.setEnabled(true);

        if (tipoConjunto.getSelectedItem().equals("LinkedList")) {
            elemento.setEnabled(true);
        }

        if (nombreConjunto.getSelectedItem().equals("Universal") && !(tipoConjunto.getSelectedItem().equals("LinkedList"))) {
            elemento.setEnabled(false);

        }

        if (tipoConjunto.getSelectedItem().equals("LinkedList")) {
            numeroElementos.setEnabled(false);
            conjuntoLA = new ConjuntoListaE();
            conjuntoLB = new ConjuntoListaE();
            universalL = new ConjuntoListaE();

        }

        if (tipoConjunto.getSelectedItem().equals("Bytes")) {

            conjuntoABy = new ConjuntoBinario();
            conjuntoBBy = new ConjuntoBinario();
            universalBy = new ConjuntoBinario();

        }

        if (tipoConjunto.getSelectedItem().equals("Array")) {

            conjuntoA = new ConjuntoArray();
            conjuntoB = new ConjuntoArray();
            universal = new ConjuntoArray();

        }
    }//GEN-LAST:event_tipoConjuntoActionPerformed

    private void conjuntoResultadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conjuntoResultadoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_conjuntoResultadoActionPerformed

    private void primerConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_primerConjuntoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_primerConjuntoActionPerformed

    private void segundoConjuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_segundoConjuntoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_segundoConjuntoActionPerformed

    private void botonMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonMostrarActionPerformed
        if (nombreConjunto.getSelectedItem().equals("ConjuntoA")) {
            mostrarConjunto.setText("ConjuntoA: " + conjuntoA.toString());
        }
        if (nombreConjunto.getSelectedItem().equals("ConjuntoB")) {
            mostrarConjunto.setText("ConjuntoB: " + conjuntoB.toString());
        }
        if (nombreConjunto.getSelectedItem().equals("Universal")) {
            mostrarConjunto.setText("Universal: " + universal.toString());
        }
    }//GEN-LAST:event_botonMostrarActionPerformed

    private void numeroElementosKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numeroElementosKeyTyped
        int key = evt.getKeyChar();

        boolean numero = (key >= 48 && key <= 57);

        if (!numero) {
            evt.consume();
        }
    }//GEN-LAST:event_numeroElementosKeyTyped

    private void elementoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_elementoKeyTyped
        int key = evt.getKeyChar();

        boolean numero = (key >= 48 && key <= 57);

        if (!numero) {
            evt.consume();
        }
    }//GEN-LAST:event_elementoKeyTyped

    private void conjuntoAcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conjuntoAcomboActionPerformed

        //MOSTRAR ARRAYS
        if (tipoConjunto.getSelectedItem().equals("Array")) {

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoA.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Array")) {
                primerConjunto.setText("ConjuntoA: " + conjuntoA.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoB.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Array")) {
                primerConjunto.setText("ConjuntoB: " + conjuntoB.toString());
            }
        }
        //MOSTRAR BINARIOS
        if (tipoConjunto.getSelectedItem().equals("Bytes")) {

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoABy.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Bytes")) {
                primerConjunto.setText("ConjuntoA: " + conjuntoABy.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoBBy.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Bytes")) {
                primerConjunto.setText("ConjuntoB: " + conjuntoBBy.toString());
            }
        }

        //MOSTRAR LINKEDLIST
        if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && tipoConjunto.getSelectedItem().equals("LinkedList")) {
            primerConjunto.setText("ConjuntoA: " + conjuntoLA.toString());
        }
        if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && tipoConjunto.getSelectedItem().equals("LinkedList")) {
            primerConjunto.setText("ConjuntoB: " + conjuntoLB.toString());

        }

    }//GEN-LAST:event_conjuntoAcomboActionPerformed

    private void conjuntoBcomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_conjuntoBcomboActionPerformed
        
        //MOSTRAR ARRAYS
        if (tipoConjunto.getSelectedItem().equals("Array")) {
            
            if (conjuntoBcombo.getSelectedItem().equals("ConjuntoA") && conjuntoA.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Array")) {
                segundoConjunto.setText("ConjuntoA: " + conjuntoA.toString());
            }
            if (conjuntoBcombo.getSelectedItem().equals("ConjuntoB") && conjuntoB.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Array")) {
                segundoConjunto.setText("ConjuntoB: " + conjuntoB.toString());
            }
        }
        
        //MOSTRAR BINARIOS
        if (tipoConjunto.getSelectedItem().equals("Bytes")) {
            
            if (conjuntoBcombo.getSelectedItem().equals("ConjuntoA") && conjuntoABy.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Bytes")) {
                segundoConjunto.setText("ConjuntoA: " + conjuntoABy.toString());
            }
            if (conjuntoBcombo.getSelectedItem().equals("ConjuntoB") && conjuntoBBy.getSize() > 0 && tipoConjunto.getSelectedItem().equals("Bytes")) {
                segundoConjunto.setText("ConjuntoB: " + conjuntoBBy.toString());
            }
        }

        //MOSTRAR LINKEDLIST
        if (conjuntoBcombo.getSelectedItem().equals("ConjuntoA") && tipoConjunto.getSelectedItem().equals("LinkedList")) {
            segundoConjunto.setText("ConjuntoA: " + conjuntoLA.toString());
        }
        if (conjuntoBcombo.getSelectedItem().equals("ConjuntoB") && tipoConjunto.getSelectedItem().equals("LinkedList")) {
            segundoConjunto.setText("ConjuntoB: " + conjuntoLB.toString());

        }

    }//GEN-LAST:event_conjuntoBcomboActionPerformed

    private void realizarOperacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realizarOperacionActionPerformed
        //OPERACIONES ARRAY
        if (tipoConjunto.getSelectedItem().equals("Array")) {
            ConjuntoArray resultado = new ConjuntoArray();

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Unión")) {
                resultado = conjuntoA.union(conjuntoB);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Unión")) {
                resultado = conjuntoB.union(conjuntoA);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Intersección")) {
                resultado = conjuntoA.interseccion(conjuntoB);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Intersección")) {
                resultado = conjuntoB.interseccion(conjuntoA);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Diferencia")) {
                resultado = conjuntoA.diferencia(conjuntoB);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Diferencia")) {
                resultado = conjuntoB.diferencia(conjuntoA);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }

            try {
                if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoA.getSize() > 0 && operaciones.getSelectedItem().equals("Complemento")) {
                    resultado = conjuntoA.complemento(universal);
                    conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
                }
                if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoB.getSize() > 0 && operaciones.getSelectedItem().equals("Complemento")) {
                    resultado = conjuntoB.complemento(universal);
                    conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
                }
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(null, "Debes Crear el Conjunto Universal");
            }
        }
        //FIN OPERACIONES ARRAY

        //OPERACIONES BYTES
        if (tipoConjunto.getSelectedItem().equals("Bytes")) {
            ConjuntoBinario resultado = new ConjuntoBinario();

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Unión")) {
                resultado = conjuntoABy.union(conjuntoBBy);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Unión")) {
                resultado = conjuntoBBy.union(conjuntoABy);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Intersección")) {
                resultado = conjuntoABy.interseccion(conjuntoBBy);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Intersección")) {
                resultado = conjuntoBBy.interseccion(conjuntoABy);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Diferencia")) {
                resultado = conjuntoABy.diferencia(conjuntoBBy);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Diferencia")) {
                resultado = conjuntoBBy.diferencia(conjuntoABy);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }

            try {
                if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA") && conjuntoABy.getSize() > 0 && operaciones.getSelectedItem().equals("Complemento")) {
                    resultado = conjuntoABy.complemento(universalBy);
                    conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
                }
                if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB") && conjuntoB.getSize() > 0 && operaciones.getSelectedItem().equals("Complemento")) {
                    resultado = conjuntoBBy.complemento(universalBy);
                    conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
                }
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(null, "Debes Crear el Conjunto Universal");
            }
        }
        //FIN OPERACIONES BYTES
        
        //OPERACIONES LINKEDLIST
        if (tipoConjunto.getSelectedItem().equals("LinkedList")) {
            ConjuntoListaE resultado = new ConjuntoListaE();

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA")  && operaciones.getSelectedItem().equals("Unión")) {
                resultado = conjuntoLA.union(conjuntoLB);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB")  && operaciones.getSelectedItem().equals("Unión")) {
                resultado = conjuntoLB.union(conjuntoLA);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }

            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA")  && operaciones.getSelectedItem().equals("Intersección")) {
                resultado = conjuntoLA.interseccion(conjuntoLB);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB")  && operaciones.getSelectedItem().equals("Intersección")) {
                resultado = conjuntoLB.interseccion(conjuntoLA);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA")  && operaciones.getSelectedItem().equals("Diferencia")) {
                resultado = conjuntoLA.diferencia(conjuntoLB);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }
            if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB")  && operaciones.getSelectedItem().equals("Diferencia")) {
                resultado = conjuntoLB.diferencia(conjuntoLA);
                conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
            }

            try {
                if (conjuntoAcombo.getSelectedItem().equals("ConjuntoA")  && operaciones.getSelectedItem().equals("Complemento")) {
                    resultado = conjuntoLA.complemento(universalL);
                    conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
                }
                if (conjuntoAcombo.getSelectedItem().equals("ConjuntoB")  && operaciones.getSelectedItem().equals("Complemento")) {
                    resultado = conjuntoLB.complemento(universalL);
                    conjuntoResultado.setText("ConjuntoResultado: " + resultado.toString());
                }
            } catch (Exception exc) {
                JOptionPane.showMessageDialog(null, "Debes Crear el Conjunto Universal");
            }
        }
        //FIN OPERACIONES LINKEDLIST

    }//GEN-LAST:event_realizarOperacionActionPerformed

    private void operacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_operacionesActionPerformed
        conjuntoBcombo.setEnabled(true);
        if (operaciones.getSelectedItem().equals("Complemento")) {

            conjuntoBcombo.setEnabled(false);
            if (tipoConjunto.getSelectedItem().equals("Array")) {

                segundoConjunto.setText("Universal" + universal.toString());
            }
            if (tipoConjunto.getSelectedItem().equals("Bytes")) {

                segundoConjunto.setText("Universal" + universalBy.toString());
            }
            if (tipoConjunto.getSelectedItem().equals("LinkedList")) {

                segundoConjunto.setText("Universal" + universalL.toString());
            }

        }
    }//GEN-LAST:event_operacionesActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarElemento;
    private javax.swing.JButton botonMostrar;
    private javax.swing.JComboBox<String> conjuntoAcombo;
    private javax.swing.JComboBox<String> conjuntoBcombo;
    private javax.swing.JTextField conjuntoResultado;
    private javax.swing.JButton crearConjunto;
    private javax.swing.JTextField elemento;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jlabel3;
    private javax.swing.JTextField mostrarConjunto;
    private javax.swing.JLabel nombre;
    private javax.swing.JComboBox<String> nombreConjunto;
    private javax.swing.JTextField numeroElementos;
    private javax.swing.JComboBox<String> operaciones;
    private javax.swing.JTextField primerConjunto;
    private javax.swing.JButton realizarOperacion;
    private javax.swing.JTextField segundoConjunto;
    private javax.swing.JComboBox<String> tipoConjunto;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
